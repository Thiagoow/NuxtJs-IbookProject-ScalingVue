import { Module, MutationAction, VuexModule } from 'vuex-module-decorators'
import { $axios } from '~/utils/nuxt-instance'

@Module({ name: 'books', stateFactory: true, namespaced: true })
export default class Books extends VuexModule {
  /* As vars criadas aqui, ser√£o os STATES da nossa aplica√ß√£o: */
  public count = 0

  /* Para que os componentes tenham acesso ao estado, 
  usamos os GETTERS (iniciam com $): */
  public get $count() {
    return this.count
  }

  /* As MutationsActions s√£o as muta√ß√µes que alteram diretamente um estado,
  sendo assim, transformam a mutation e a action em uma s√≥. Sendo a sintaxe
  delas = @MutationAction({mutate: ["varQueSofrer√°Mutation"]}) */
  @MutationAction({ mutate: ['count'] }) // üëàüèª Isso √© um decorator üòä
  async increment(number: number) {
    // Faz incrementar um n√∫mero:
    await $axios.get('/')
    return { count: number }
  }
  /* Para as MutationsActions funcionarem, os states, e getter precisam ser p√∫blicos.
  Al√©m disso, toda MutationAction √© ass√≠ncrona (async&await). E isso √© uma caracter√≠stica
  OBRIGAT√ìRIA, e IMUT√ÅVEL, de toda MutationAction. SENDO ASSIM, S√ì USAMOS ESSE DECORATOR QUANDO
  FORMOS FAZER UMA REQUISI√á√ÉO!! üòâ */
}
